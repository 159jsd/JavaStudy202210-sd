package j08_메소드;

/*
* 메소드 오버로딩
* 매개변수의 형태가 다르면 동일한 매소드 명을 가지고 정의할 수 있다.
* */

public class Overloading {

    public static void add() {
        System.out.println("add()");
    }

    public static void add(int a) {
        System.out.println("add(1)");
    }

    public static void add(String s) {
        System.out.println("add(s)");
    }

    public static void add(int a, int b) {
        System.out.println("add(1, 2)");
    }

    public static void add(int a, String b) {
        System.out.println("add(1, b)");
    }

    public static void add(String b,int a ) {
        System.out.println("add(b, 1)");
    }

    public static void main(String[] args) {
        add();
        add(1);
        add("s");
        add(1, 2);
        add(1 ,"b");
        add("b",1);
    }
}

/*
*       객체지향 언어란
* 객체란 세상에 존재하는 모든 것을 의미
* 프로그래밍 관점에서는 객체들의 관계성을 사용하여 순차적으로 수행되는 프로그램 내에서 객체들 간에 관계를 형성하여 프로글램을 동작하게됨.
* 객체 = 데이터 + 기능
* 데이터(변수) = 모니터, 본체, 키보드, 마우스, 스피커등
* 기능(메소드) = 화면출력, 프로그램 실행, 입력, 소리출력등
*
* 객체지향 언어특징
* 1.상속 : 의미 그대로 상위 클래스의 모든 것을 상속받아 사용하는 것, 부모와 자식의 관계
* 2.캡슐화 : 데이터와 기능을 외부로부터 접근은 차단하고 권한 또는 절차 없이
* 데이터를 변경 또는 기능 수행을 할 수 없게 캡슐처럼 보호함. (데이터의 은닉성) Private
* 3.추상화 : 추상적인 요소들을 묶어서 분류하는 것 학생, 선생, 학부모 등 사람이라는 추상적인 요소로 분류할 수 있음 (데이터의 구조화)
* 4.다형성 : 객체의 기능이 다양한 형태를 가질 수 있음 상속과 깊은 관계를 가진다. 한 부모 밑에서 태어난 자식이 완전히 같을 수 없듯이
* 객체 또한 부모 클래스로 부터 상속받은 데이터와 기능을 자식 클래스에서 재정의하여 사용할 수 있음.
*
* 객체지향 언어의 장점
* 1. 재사용성 : 상속을 통해 코드의 재사용을 높일 수 있음.
* 2. 생산성 향상 : 클래스의 단위의 부품들을 조립.
* 3. 유지보수의 우수성 : 구조화 된 소스코드 클래스 단위로 소스코드를 관리할 수 있음.
*
* 객체지향 언어의 단점
* 1. 객체를 세분화하여 설계하여야한다.
* 2. 실행 속도가 절차지향 언어 대비 느리다.
* 3. 상속으로 인하여 관계가 많이 형성되면 코딩의 난이도가 높아진다.
*
* 절차 지향언어의 반대가 객체지향 언어가 아니다!
* 객체 지향 언어도 절차지향언어에 속하지만 객체라는 녀석들의 관계가 추가된 것이다.
*
* 클래스
*
* 객체 (Object)
* 클래스를 통해 구현 할 수 있는 모든 대상 즉, 해당 클래스로 구현한 인스턴스를 대표하는 의미
* 인스턴스 (Instance)
* 객체가 실제로 구현된 것, 클래스의 인스턴스라고 함
*/
